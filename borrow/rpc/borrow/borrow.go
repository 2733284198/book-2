// Code generated by goctl. DO NOT EDIT!
// Source: borrow.proto

//go:generate mockgen -destination ./borrow_mock.go -package borrow -source $GOFILE

package borrow

import (
	"context"

	borrow "book/borrow/rpc/pb"

	"github.com/tal-tech/go-zero/core/jsonx"
	"github.com/tal-tech/go-zero/zrpc"
)

type (
	Borrow interface {
		// 借书
		Borrow(ctx context.Context, in *BorrowReq) (*BaseReply, error)
		// 还书
		Return(ctx context.Context, in *ReturnReq) (*BaseReply, error)
	}

	defaultBorrow struct {
		cli zrpc.Client
	}
)

func NewBorrow(cli zrpc.Client) Borrow {
	return &defaultBorrow{
		cli: cli,
	}
}

// 借书
func (m *defaultBorrow) Borrow(ctx context.Context, in *BorrowReq) (*BaseReply, error) {
	var request borrow.BorrowReq
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := borrow.NewBorrowClient(m.cli.Conn())
	resp, err := client.Borrow(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret BaseReply
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

// 还书
func (m *defaultBorrow) Return(ctx context.Context, in *ReturnReq) (*BaseReply, error) {
	var request borrow.ReturnReq
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := borrow.NewBorrowClient(m.cli.Conn())
	resp, err := client.Return(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret BaseReply
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}
