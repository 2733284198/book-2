// Code generated by goctl. DO NOT EDIT!
// Source: library.proto

//go:generate mockgen -destination ./library_mock.go -package library -source $GOFILE

package library

import (
	"context"

	library "book/library/rpc/pb"

	"github.com/tal-tech/go-zero/core/jsonx"
	"github.com/tal-tech/go-zero/zrpc"
)

type (
	Library interface {
		// 通过书籍名称查找书籍
		FindBookByName(ctx context.Context, in *FindBookReq) (*FindBookReply, error)
	}

	defaultLibrary struct {
		cli zrpc.Client
	}
)

func NewLibrary(cli zrpc.Client) Library {
	return &defaultLibrary{
		cli: cli,
	}
}

// 通过书籍名称查找书籍
func (m *defaultLibrary) FindBookByName(ctx context.Context, in *FindBookReq) (*FindBookReply, error) {
	var request library.FindBookReq
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := library.NewLibraryClient(m.cli.Conn())
	resp, err := client.FindBookByName(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret FindBookReply
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}
