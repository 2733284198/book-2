// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

//go:generate mockgen -destination ./user_mock.go -package user -source $GOFILE

package user

import (
	"context"

	user "book/user/rpc/pb"

	"github.com/tal-tech/go-zero/core/jsonx"
	"github.com/tal-tech/go-zero/zrpc"
)

type (
	User interface {
		// 判断用户是否存在
		IsUserExist(ctx context.Context, in *UserExistReq) (*UserExistReply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 判断用户是否存在
func (m *defaultUser) IsUserExist(ctx context.Context, in *UserExistReq) (*UserExistReply, error) {
	var request user.UserExistReq
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := user.NewUserClient(m.cli.Conn())
	resp, err := client.IsUserExist(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret UserExistReply
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}
